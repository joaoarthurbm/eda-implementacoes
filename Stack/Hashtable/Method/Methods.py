#coding : utf-8
import sys,os
sys.path.append('../Operation/')
from enum import Enum
from Operation import *


__author__ = "Ionesio Junior"


class Method(Enum):
	''' ENUM to select method used to generate key with prob in Open Adress Hashtable implementation'''
	LINEAR_PROBING = 1
	QUADRATIC_PROBING = 2


class LinearProbing(object):
	''' Linear Method 
	    
            Attributes:
		tableSize(int) : size of internal table
		operation(MULTIPLICATION/DIVISION) : operation used to generate hashcode	
	'''
	__tableSize = None
	__operation = None
	
	def __init__(self,tableSize,method):
		''' Linear Probing Constructor, initialize attributes and select operation 
		
		    Args:
			tableSize(int) : size of internal table
			method(Enum Operation) : Enum to select the method used to generate Hashcode used (MULTIPLICATION/DIVISION)
		'''
		self.__tableSize = tableSize
		if(method == Operation.MULTIPLICATION):
			self.__operation = Multiplication(self.__tableSize)
		else:
			self.__operation  = Division(self.__tableSize)

	def hashMethod(self,element,prob):
		''' Return index of some element using hashcode generated by operation.hashFunc + prob
		
		    Args:
			element(optional) : element to be hash
			prob(int) : integer variable to increase index result
		'''
		return ((self.__operation.hashFunc(element) + prob) % self.__tableSize)



class QuadraticProbing(object):
	''' Quadratic Method 
		
	    Attributes:
		tableSize(int) : size of internal hash table
		operation(Enum Operation) : type of operation used to generate hashcode (DIVISION/MULTIPLICATION)
		c1(int) : constant1 to generate index in hashMethod 
		c2(int) : constant2 to generate index in hashMethod
	'''
	__tableSize = None
	__c1 = None
	__c2 = None
	__operation = None
	
	def __init__(self,tableSize,method,c1,c2):
		''' Quadratic Probing constructor ,initialize attributes and select operation
		
		    Args:
			tableSize(int) : size of internal table in hashtable
			method(Enum Operation) : Enum to select type of operation used to generate hashcode
			c1(int) : constant1 to generate index in hashMethod
			c2(int) : constant2 to generate index in hashMethod
		'''
		self.__tableSize = tableSize
		self.__c1 = c1
		self.__c2 = c2
		if(method == Operation.MULTIPLICATION):
			self.__operation = Multiplication(self.__tableSize)
		else:
			self.__operation = Division(self.__tableSize)


	def hashMethod(self,element,prob):
                ''' Return index of some element using hashcode generated by operation.hashFunc + prob
                
                    Args:
                        element(optional) : element to be hash
                        prob(int) : integer variable to increase index result
                '''
		generatedIndex = self.__operation.hashFunc(element)
		return ((generatedIndex + self.__c1 * prob + self.__c2 * prob * prob) % self.__tableSize)
