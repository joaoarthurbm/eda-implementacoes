#coding : utf-8

import sys,os
sys.path.append('/Method/')
sys.path.append('/Operation/')
from Hashtable import Hashtable
from Methods import *

__author__ = "Ionesio Junior"

class OpenAdress(Hashtable):
	''' Hashtable open adress implementation 
		
	    Attributes: 
		deletedObject(deletedObject) : represents empty space in array when some object is deleted
	'''
	__deletedObject = None

	def __init__(self,size,probingMethod,operationMethod):
		''' Hash table Open Adress Constructor, initialize hashtable attributes and Open Adress attributes
		    
		    Args:
			size(int) : size of internal table
			probingMethod(Enum Method) : type of method used to calc key(LINEARPROBING OR QUADRATIC PROBING)
			OperationMethod(Enum Operation) : type of method used to calc Hash(DIVISION OR MULTIPLICATION)
		'''
		Hashtable.__init__(self,size,operationMethod,probingMethod)
		self.__deletedObject = DeletedObject()

	def insert(self,element):
		'''
			Insert a new element in hashtable(not allowed None elements or element equal other inserted previously)
			if intertal table is full, raises Exception
			
			
			Args:
				element(optional) : element to be inserted
			Raises:
				Exception : when hash table is full
			
		'''
		if(element == None  or self.indexOf(element) != -1):
			return;
		elif(self.isFull()):
			raise Exception("HashtableOverflow!!!")
		else:
			probe = 0
			index = self.getIndex(element,probe)
			if(self.isNone(index) or self.isDeleted(index)):
				self.table[index] = element
				self.elements += 1
			else:
				while(not(self.isNone(index)) and not(self.isDeleted(index)) and probe < self.capacity()):
					probe += 1
					index = self.getIndex(element,probe)
					self.COLLISIONS += 1
				
				if(self.isNone(index) or self.isDeleted(index)):
					self.table[index] = element
					self.elements += 1

	def isNone(self,index):
		''' Verify if in index position of internal table have some empty space
		
		    Args:
			index(int) : index of internal table
		    Returns:
			boolean
		'''
		return self.table[index] == None
	
	def isDeleted(self,index):
		''' Verify if in index position of internal table have some deletedObject
			
		    Args:
			index(int) : index of internal table
		    Returns:
			boolean
		'''
		return self.table[index] == self.__deletedObject

	def getIndex(self,element,probe):
		''' Return index generated by hashMethod 
		
			Args:
				element(optional) : element that will generate hashcode index
				probe(int) : number to increase hashcode index
			Returns:
				index(int) : index generated
		'''
		return self.function.hashMethod(element,probe)
	
	def search(self,element):
		''' Search an element and return it,if not found return None
		
		    Args:
			element(optional) : element to be searched
		    
   		    Returns:
			element(optional) : elementFound / None
		
		'''
		if(element != None):
			index = self.indexOf(element)
			if(index == -1):
				return None
			else:
				return self.table[index]
	
	def remove(self,element):
		''' Remove some element to the internal table if find it
		
		    Args:
			element(optional) : element to be removed
		'''
		if(element != None):
			index = self.indexOf(element)
			if(index == -1):
				return
			else:
				self.table[index] = self.__deletedObject
				self.elements -= 1
	
	def indexOf(self,element):
		'''
			Return table index of a found element, or None if element not found
			
			Args:
				element(optional) : search index of this element
				
			Returns:
				index(int/None) : return index element / None 
		'''
		if(element == None):
			return -1
		else:
			prob = 0
			index = self.getIndex(element,prob)
			if(self.isNone(index)):
				return -1;
			else:
				if(self.table[index] == element):
					return index;
				else:
					prob = 1
					index = self.getIndex(element,prob)
					while(not(self.isNone(index)) and prob < self.capacity()):
						if(self.table[index] == element):
							return index
						else:
							prob += 1
							index = self.getIndex(element,prob)
					return -1

class DeletedObject(object):
	''' This class represent some empty space in the internal table'''
	pass
